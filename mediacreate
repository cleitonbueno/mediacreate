#!/bin/bash

# program parameters
DEVICE_FILE=""
CONFIG_FILE=""
DEBUG=0
FORCE=0

# config file variables
CFG_DOS=""
CFG_GEOMETRY=""
CFG_PARTITION=""
CFG_FORMAT=""
CFG_IMAGE=""
CFG_IMGDIR=""

# temp dir
TMP_DIR=$(pwd)/.mediacreate

# banner
APP_VERSION="1.0"
APP_BANNER="Starting mediacreate V$APP_VERSION"

# debug
DEBUG_REDIR="&>-"

# filesystems
SUPPORTED_FS="btrfs ext2 ext3 ext4 ntfs vfat"

# copy image modes
IMAGE_COPY_MODES="raw file tar"

clean()    
{
    umount $TMP_DIR &>-
    rm -Rf $TMP_DIR
}

prepare()
{
    clean
    assert mkdir -p $TMP_DIR
}

exit_app()
{
    clean
    exit $1
}

log()
{
    local DATE=$(date)
    echo "[$DATE] $@"
}

log_debug()
{
    if [ $DEBUG == 1 ]; then
        echo "$@"
    fi
}

exit_error()
{
    log "ERROR: $@"
    sleep 1
    exit_app 1
}

exit_error_if_null()
{
    if [ "$2" == "" ]; then
        exit_error $1
    fi
}

exit_error_if_not_num()
{
    exit_error_if_null $@

    local re='^[0-9]+$'
    if ! [[ $2 =~ $re ]] ; then
        exit_error $1
    fi
}

assert()
{
    $@
    if [ $? != 0 ]; then
        exit_error "Could not execute command [$@]"
    fi
}

contains() {
    for s in $1; do
        if [ "$s" == "$2" ]; then
            return 0
        fi
    done
    return 1
}

exit_contains()
{
    contains "$1" "$2"
    if [ $? == 1 ]; then
        exit_error "$3"
    fi
}

usage()
{
    echo -e "usage: mediacreate [options]"
    echo -e "\t-d, --device\tdevice node file"
    echo -e "\t-c, --config\tread config from file"
    echo -e "\t-f, --force\tdo not ask before partitioning device"
    echo -e "\t-g, --debug\tshow debug messages"
    echo -e "\t-h, --help\tthis help"
}

read_params()
{
    while [ "$1" != "" ]; do
        case $1 in
            -d | --device )         shift
                                    DEVICE_FILE=$1
                                    ;;

            -c | --config )         shift
                                    CONFIG_FILE=$1
                                    ;;
            
            -f | --force )          FORCE=1
                                    ;;

            -g | --debug )          DEBUG=1
                                    DEBUG_REDIR=""
                                    ;;
            
            -h | --help )           usage
                                    exit_app
                                    ;;

            * )                     usage
                                    exit_app 1
        esac
        shift
    done
}

validate_params()
{
    if [ "$DEVICE_FILE" == "" ]; then
        exit_error "Please provide a device file."
    fi

    if [ ! -e $DEVICE_FILE ]; then
        exit_error "Device file [$DEVICE_FILE] not found!"
    fi

    if [[ "$DEVICE_FILE" == *mmcblk* ]]; then 
        DEVICE_PART_FILE=${DEVICE_FILE}p
    else
        DEVICE_PART_FILE=${DEVICE_FILE}
    fi
    log_debug "DEVICE_PART_FILE=$DEVICE_PART_FILE"

    if [ "$CONFIG_FILE" == "" ]; then
        exit_error "Please provide a config file."
    fi

    if [ ! -e $CONFIG_FILE ]; then
        exit_error "Device file [$CONFIG_FILE] not found!"
    fi
}

check_params()
{
    log "Checking parameters"
    read_params $@
    validate_params
}

search_option_config()
{
    grep -q "^$1" $CONFIG_FILE
    return $?
}

get_multiple_option_config()
{
    grep "^$1" $CONFIG_FILE | awk -F= '{print $2}'
}

get_option_config()
{
    grep "^$1" $CONFIG_FILE | cut -d = -f 2
}

get_option_field_config()
{
    echo -e $1 | cut -d , -f $2
}

read_config_dos()
{
    if search_option_config "DOS=true"; then
        CFG_DOS="-D"
    fi
}

read_config_geometry()
{
    local OPTION_CONFIG=$(get_option_config "GEOMETRY")
    
    if [ "$OPTION_CONFIG" == "" ]; then
        return
    fi
    
    CFG_HEADS=$(get_option_field_config $OPTION_CONFIG 1)
    exit_error_if_not_num "Invalid heads configuration!" $CFG_HEADS

    CFG_SECTORS=$(get_option_field_config $OPTION_CONFIG 2)
    exit_error_if_not_num "Invalid sectors configuration!" $CFG_SECTORS

    DISK_SIZE=$(fdisk -l /dev/sdd | grep Disk | grep bytes | awk '{print $5}')
    exit_error_if_not_num "Invalid disk size!" $DISK_SIZE

    CFG_CYLINDERS=$(echo $DISK_SIZE/$CFG_HEADS/$CFG_SECTORS/512 | bc)
    exit_error_if_not_num "Invalid cylinders configuration!" $CFG_CYLINDERS
    
    CFG_GEOMETRY="-H $CFG_HEADS -S $CFG_SECTORS -C $CFG_CYLINDERS"
}

read_config_partition()
{
    CFG_PARTITION=$(get_multiple_option_config "PARTITION")
}

read_config_format()
{
    CFG_FORMAT=$(get_multiple_option_config "FORMAT")
}

read_config_image()
{
    CFG_IMAGE=$(get_multiple_option_config "IMAGE")
}

read_config_image_dir()
{
    CFG_IMGDIR=$(get_option_config "IMGDIR")
    CFG_IMGDIR=$(eval echo $CFG_IMGDIR)

    if [ "$CFG_IMGDIR" == "" ]; then
        CFG_IMGDIR=$(pwd)
    fi
}

print_config()
{
    log_debug "CFG_DOS=[$CFG_DOS]"
    log_debug "CFG_GEOMETRY=[$CFG_GEOMETRY]"
    log_debug "CFG_PARTITION=[$CFG_PARTITION]"
    log_debug "CFG_FORMAT=[$CFG_FORMAT]"
    log_debug "CFG_IMAGE=[$CFG_IMAGE]"
    log_debug "CFG_IMGDIR=[$CFG_IMGDIR]"
}

read_config()
{
    log "Reading config file"
    read_config_dos
    read_config_geometry
    read_config_partition
    read_config_format
    read_config_image
    read_config_image_dir
    print_config
}

check_user()
{
    if [ "$EUID" != "0" ]; then
        exit_error "This program must be run as root."
    fi
}

disk_partition_confirm()
{
    local RESP=""
    while [ "$RESP" != "y" ]; do
        echo -n "This operation will erase $DEVICE_FILE! Do you want to continue? (y/n) "
        read RESP
        RESP=$(echo "${RESP,,}")
        if [ "$RESP" == "n" ]; then
            exit_error "Operation cancelled!"
        fi
    done
}

disk_umount()
{
    log "Umounting disk partitions"
    for f in $(ls ${DEVICE_FILE}*); do
        sudo umount $f &>- 
    done
}

disk_prepare()
{
    if [ $FORCE == 0 ]; then
        disk_partition_confirm
    fi

    disk_umount
}

disk_partition()
{
    if [ -z "$CFG_PARTITION" ]; then
        log "No disk partitions to be created"
        return
    fi

    log "Creating disk partitions"
    
    local SFDISK_CMD="sfdisk --no-reread -u M $CFG_DOS $CFG_GEOMETRY $DEVICE_FILE $DEBUG_REDIR"
    log_debug "SFDISK command [$SFDISK_CMD]"

    echo "$CFG_PARTITION" | eval $SFDISK_CMD
    if [ $? != 0 ]; then
        exit_error "Could not create disk partitions!"
    fi

    sfdisk --re-read $DEVICE_FILE &>-
}

parse_format_config()
{
    FMTINFO_PART=$(get_option_field_config $1 1)
    log_debug FMTINFO_PART=$FMTINFO_PART
    exit_error_if_not_num "Invalid partition number!" $FMTINFO_PART

    FMTINFO_LABEL=$(get_option_field_config $1 2)
    log_debug FMTINFO_LABEL=$FMTINFO_LABEL

    FMTINFO_TYPE=$(get_option_field_config $1 3)
    log_debug FMTINFO_TYPE=$FMTINFO_TYPE
    exit_error_if_null "Please provide a filesystem type for partition $FMTINFO_PART!" $FMTINFO_TYPE
    exit_contains "$SUPPORTED_FS" "$FMTINFO_TYPE" "Invalid filesystem type for partition $FMTINFO_PART!"
}

disk_format_command()
{
    local LABEL=""
    if [ ! -z "$FMTINFO_LABEL" ]; then
        case $FMTINFO_TYPE in
            "vfat")
                LABEL="-n $FMTINFO_LABEL"
                ;;
            *)
                LABEL="-L $FMTINFO_LABEL"
                ;;
        esac 
    fi

    local ADDCMD=""
    case $FMTINFO_TYPE in
        "vfat")
            ADDCMD="-F 32"
            ;;
    esac

    echo "mkfs.$FMTINFO_TYPE $ADDCMD $LABEL $1"
}

disk_format_partition()
{
    local PARTITION_FILE="${DEVICE_PART_FILE}${FMTINFO_PART}"
    if [ ! -e $PARTITION_FILE ]; then
        exit_error "Disk partition $PARTITION_FILE not found!"
    fi
    log "Formatting disk partition [$PARTITION_FILE] to [$FMTINFO_TYPE]"

    local FORMAT_CMD=$(disk_format_command $PARTITION_FILE)
    log_debug FORMAT_CMD=[$FORMAT_CMD]

    eval $FORMAT_CMD $DEBUG_REDIR
    if [ $? != 0 ]; then
        exit_error "Error formating disk partition $PARTITION_FILE!"
    fi
}

disk_format()
{
    if [ -z "$CFG_FORMAT" ]; then
        log "No disk partitions to be formatted"
        return
    fi

    log "Formating disk partitions"

    local FMTINFO=""

    for FMTINFO in $(echo "$CFG_FORMAT"); do
        parse_format_config $FMTINFO
        disk_format_partition
    done
}

parse_image_config()
{
    IMGINFO_PART=$(get_option_field_config $1 1)
    log_debug IMGINFO_PART=$IMGINFO_PART
    exit_error_if_not_num "Invalid partition number!" $IMGINFO_PART
    
    if [ "$IMGINFO_PART" != "0" ]; then
        IMGINFO_DEVICE=$DEVICE_FILE$IMGINFO_PART
    else
        IMGINFO_DEVICE=$DEVICE_FILE
    fi
    log_debug IMGINFO_DEVICE=$IMGINFO_DEVICE
    if [ ! -e $IMGINFO_DEVICE ]; then
        exit_error "Image device file not found [$IMGINFO_DEVICE]!"
    fi

    IMGINFO_FILE=$(get_option_field_config $1 2)
    log_debug IMGINFO_FILE=$IMGINFO_FILE
    exit_error_if_null "Please provide an image filename!" $IMGINFO_FILE
    if [ "${IMGINFO_FILE:0:1}" != "/" ]; then
        IMGINFO_FILE=${CFG_IMGDIR}/${IMGINFO_FILE}
        log_debug "IMGINFO_FILE=$IMGINFO_FILE (absolute path)"
    fi
    if [ ! -e $IMGINFO_FILE ]; then
        exit_error "Image file not found [$IMGINFO_FILE]!"
    fi

    IMGINFO_MODE=$(get_option_field_config $1 3)
    log_debug IMGINFO_MODE=$IMGINFO_MODE
    exit_contains "$IMAGE_COPY_MODES" "$IMGINFO_MODE" "Invalid image copy mode!"

    IMGINFO_LOCATION=$(get_option_field_config $1 4)
    log_debug IMGINFO_LOCATION=$IMGINFO_LOCATION
    exit_error_if_null "Please provide a location for the image!" $IMGINFO_LOCATION
    if [ "$IMGINFO_MODE" == "raw" ]; then
        exit_error_if_not_num "Invalid disk location for raw mode!" $IMGINFO_LOCATION
    fi
}

copy_image_raw()
{
    log "copying raw"
}

copy_image_file()
{
    log "Copying [$IMGINFO_FILE] to [$IMGINFO_LOCATION] at partition [$IMGINFO_DEVICE]"

    umount $IMGINFO_DEVICE &>-
    assert mount $IMGINFO_DEVICE $TMP_DIR

    local DEST=$TMP_DIR/$IMGINFO_LOCATION
    if [ ! -e $DEST ]; then
        exit_error "Image destination directory does not exist [$IMGINFO_LOCATION]!"
    fi

    log "Copying file [$IMGINFO_FILE] to disk"
    assert eval cp -Rdv $IMGINFO_FILE $DEST $DEBUG_REDIR

    log "Syncing disk partition [$IMGINFO_DEVICE]"
    sync
    assert umount $IMGINFO_DEVICE
}

copy_image_tar()
{
    log "Untar [$IMGINFO_FILE] on [$IMGINFO_LOCATION] at partition [$IMGINFO_DEVICE]"

    umount $IMGINFO_DEVICE &>-
    assert mount $IMGINFO_DEVICE $TMP_DIR

    local DEST=$TMP_DIR/$IMGINFO_LOCATION
    if [ ! -e $DEST ]; then
        exit_error "Image destination directory does not exist [$IMGINFO_LOCATION]!"
    fi

    log "Decompressing file [$IMGINFO_FILE] to disk"
    assert eval tar xfv $IMGINFO_FILE -C $TMP_DIR/$IMGINFO_LOCATION $DEBUG_REDIR

    log "Syncing disk partition [$IMGINFO_DEVICE]"
    sync
    assert umount $IMGINFO_DEVICE
}

copy_image()
{
    case $IMGINFO_MODE in
        "raw")
            copy_image_raw
            ;;
        "file")
            copy_image_file
            ;;
        "tar")
            copy_image_tar
            ;;
        *)
            exit_error "Invalid image copy mode [$IMGINFO_MODE]!"
            ;;
    esac
}

disk_copy_image()
{
    if [ -z "$CFG_IMAGE" ]; then
        log "No images to be copied to disk"
        return
    fi

    log "Copying images to disk"

    local IMGINFO=""

    for IMGINFO in $(echo "$CFG_IMAGE"); do
        parse_image_config $IMGINFO
        copy_image
    done
}

main(){
    log $APP_BANNER
    prepare
    check_user
    check_params $@
    read_config
    disk_prepare
    disk_partition
    disk_format
    disk_copy_image
    clean
    log "Media successfully created!"
}

main $@

